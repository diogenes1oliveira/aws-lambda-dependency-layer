---
- name: Side-effects
  hosts: all
  gather_facts: false

  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
    layer_filename: layer.zip

  tasks:
    - include_tasks: assure-dependencies.yml

    - name: Clean up the build directory
      docker_container:
        name: "temp-lambda-container-cleanup"
        image: alpine
        state: started
        auto_remove: true
        command: rm -rf /mnt/*
        volumes:
          - "{{ molecule_ephemeral_directory }}/build:/mnt"

    - name: Undeploy the image
      include_role:
        name: aws_lambda_dependency_layer
      vars:
        name: "temp-layer-2-{{ temp_suffix }}"
        state: absent

    - name: Just build the image
      include_role:
        name: aws_lambda_dependency_layer
      vars:
        name: "temp-layer-2-{{ temp_suffix }}"
        mode: build
        context: ./tests/sample-data/ruby2.5
        output: "{{ molecule_ephemeral_directory }}/build"
        runtime: ruby2.5

    - name: Fetch the ZIP after build mode
      no_log: true
      slurp:
        path: "{{ molecule_ephemeral_directory }}/build/{{ layer_filename }}"
      register: zip_after_build

    - name: Save the exported variables from the build
      no_log: true
      copy:
        content: "{{ hostvars[inventory_hostname] | to_json }}"
        dest: "{{ molecule_ephemeral_directory }}/role-variables-build.json"

    - name: Clean up the build directory
      docker_container:
        name: "temp-lambda-container-cleanup"
        image: alpine
        state: started
        auto_remove: true
        command: rm -rf /mnt/*
        volumes:
          - "{{ molecule_ephemeral_directory }}/build:/mnt"

    - name: Deploy the image
      include_role:
        name: aws_lambda_dependency_layer
      vars:
        name: "temp-layer-2-{{ temp_suffix }}"
        state: present
        context: ./tests/sample-data/ruby2.5
        output: "{{ molecule_ephemeral_directory }}/build"
        runtime: ruby2.5
        bucket: "temp-bucket-{{ temp_suffix }}"
        object_key: layer-2.zip

    - name: Fetch the ZIP after deploy mode
      no_log: true
      slurp:
        path: "{{ molecule_ephemeral_directory }}/build/{{ layer_filename }}"
      register: zip_after_deploy

    - name: Save the exported variables from the deployment
      no_log: true
      copy:
        content: "{{ hostvars[inventory_hostname] | to_json }}"
        dest: "{{ molecule_ephemeral_directory }}/role-variables-side-effects-present.json"

    - name: Check after deployment
      include_role:
        name: aws_lambda_dependency_layer
      vars:
        name: "temp-layer-2-{{ temp_suffix }}"
        context: ./tests/sample-data/ruby2.5
        mode: check

    - name: Save the checked variables after deployment
      no_log: true
      copy:
        content: "{{ hostvars[inventory_hostname] | to_json }}"
        dest: "{{ molecule_ephemeral_directory }}/role-variables-check-present.json"

    - name: Undeploy the image
      include_role:
        name: aws_lambda_dependency_layer
      vars:
        name: "temp-layer-2-{{ temp_suffix }}"
        state: absent

    - name: Save the exported variables after undeployment
      no_log: true
      copy:
        content: "{{ hostvars[inventory_hostname] | to_json }}"
        dest: "{{ molecule_ephemeral_directory }}/role-variables-side-effects-absent.json"

    - name: Check after undeployment
      include_role:
        name: aws_lambda_dependency_layer
      vars:
        name: "temp-layer-2-{{ temp_suffix }}"
        context: ./tests/sample-data/ruby2.5
        output: "{{ molecule_ephemeral_directory }}/build"
        mode: check

    - name: Save the checked variables after undeployment
      no_log: true
      copy:
        content: "{{ hostvars[inventory_hostname] | to_json }}"
        dest: "{{ molecule_ephemeral_directory }}/role-variables-check-absent.json"
