---
# tasks/main

- name: Check if the image already exists
  aws_layer_search:
    name: "{{ name }}"
  register: layer

- name: Destroy the layer if requested so
  when: state == 'absent' and not (check_only | bool)
  aws_lambda_layer:
    name: "{{ name }}"
    state: absent

- name: By default, no deployment occurs
  set_fact:
    aws_lambda_dependency_layer_deployed: false

- name: Deploy the layer if requested so
  when: state == 'present' and not (check_only | bool) and not layer.found
  block:
    - name: Build the Docker image with the dependencies bundled in
      docker_image:
        source: build
        state: present
        force_tag: true
        name: "temp-lambda-image-{{ name }}"
        build:
          path: "{{ context }}"
          pull: true
          dockerfile: "{{ role_path }}/runtimes/{{ runtime }}/Dockerfile"

    - name: Create a temporary directory
      tempfile:
        state: directory
      register: tempdir
      changed_when: false

    - name: Copy the layer contents to the temporary directory
      docker_container:
        name: "temp-lambda-container-{{ name }}"
        image: "temp-lambda-image-{{ name }}"
        state: started
        command: cp /layer.zip /mnt/layer.zip
        cleanup: true
        volumes:
          - "{{ tempdir.path }}:/mnt"
      changed_when: false

    - name: Publish the layer
      aws_lambda_layer:
        name: "{{ name }}"
        state: present
        path: "{{ tempdir.path }}/layer.zip"
        bucket: "{{ bucket }}"
        object_key: "{{ object_key }}"
      register: lambda_layer

    - name: Register that a deployment occurred
      set_fact:
        aws_lambda_dependency_layer_deployed: true

- name: Look up the image again
  aws_layer_search:
    name: "{{ name }}"
  register: layer

- name: Export the variables
  set_fact:
    aws_lambda_dependency_layer_name: "{{ name }}"
    aws_lambda_dependency_layer_arn: "{{ layer.layer_arn | d(None) }}"
    aws_lambda_dependency_layer_version: "{{ layer.version | d(None) }}"
    aws_lambda_dependency_layer_version_arn: "{{ layer.arn | d(None) }}"
    aws_lambda_dependency_layer_state: "{{ layer.found | ternary('present', 'absent') }}"
